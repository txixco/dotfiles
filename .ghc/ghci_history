diagonalDifference mtrx
mtrx = [[1,2,3], [4,5,6], [7,8,7]]
diagonalDifference mtrx
mtrx = [[1,2,3], [4,5,6], [7,8,9]]
diagonalDifference mtrx
mtrx = [[6,8], [-6,9]]
:r
reverse 1
reverse 0
reverse n = abs $ lastRow - n
reverse 0
reverse 1
reverse n = abs $ (lastRow - n)
reverse 1
reverse 0
reverse n = abs $ ((lastRow - 1) - n)
reverse 0
reverse 1
reverse n = abs $ (lastRow - 1) - n
reverse 1
reverse 0
reverse n = abs $ lastRow - 1
lastRow 
lastRow = (length mtrx) - 1
-6+8
6+9
cell 0 0
cell x y = mtrx !! x !! y
cell mtrx 0 0
cell 0 0
cell m x y = m !! x !! y
diagonalDifference mtrx
mtrx
mtrx = [[6,8], [-6,9]]
main
main
main
mtrx = [[1,2,3], [4,5,6], [7,8,9]]
:r
:r
diag2
diag1
mtrx
diag2
diag2 = [mtrx !! (abs (length mtrx) - i - 1) !! i | i <- [0..(length mtrx)-1]]
diag2
diag2 = [((abs (length mtrx) - i - 1), i) | i <- [0..(length mtrx)-1]]
diag2
diag2 = [(i, (abs (length mtrx) - i - 1)) | i <- [0..(length mtrx)-1]]
diag2
diag2 = [(abs (length mtrx) - i - 1) | i <- [0..(length mtrx)-1]]
diag2
diag 2
diag2 = [(abs (length mtrx) - i) | i <- [0..(length mtrx)-1]]
diag2 = [mtrx !! i !! ((abs (length mtrx) - i) | i <- [0..(length mtrx)-1]]
diag2 = [mtrx !! i !! (abs (length mtrx) - i | i <- [0..(length mtrx)-1]]
sum diag1
diag1
diag1 = [mtrx !! i !! i | i <- [0..(length mtrx)-1]]
diag1 = [mtrx !! i !! i | i <- [0..(lenght mtrx)-1]]
length mtrx
diagonals mtrx
mtrx
mtrx = [[1,2,3], [4,5,6], [7,8,9]]
main
main
main
main
:r
main
:r
main
main
main
main
:r
main
:r
main
:r
:r
:r
:t (getLine >>= words)
getLine >>= words
getRowLine = getLine >>= words
getLine >>= putStr >> putChar '\n'
getLine >>= putStr
putStr . getLine 
:t putStr
:i >>=
getLine >>= putStr words
getLine >>= putStr . show . length . words
:}
getRowLine = getLine >>= (map readInt $ words)
getRowLine :: [Int]
:{
:}
readInt = read
readInt :: String -> Int
:{
